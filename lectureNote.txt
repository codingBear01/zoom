<#0 INTRODUCTION>

#0.2 Server Setup & #0.3 Frontend Setup 

-- Ìè¥Îçî ÎßåÎì§Í∏∞ & Í≤ΩÎ°ú ÏÑ§Ï†ï
mkdir <folder name>
cd <folder>
npm init -y


-- package.json ÏÑ§Ï†ï & README.md
delete main & scripts
keywords, author Îì±ÏùÄ ÌïÑÏöî Ïãú ÏÑ§Ï†ï

touch README.md // README ÌååÏùº ÏÉùÏÑ±


-- nodemon
npm i nodemon -D

babel.config.json ÌååÏùº ÏÉùÏÑ±
nodemon.json ÌååÏùº ÏÉùÏÑ±

/src/server.js


-- babel

git init .
npm i @babel/core @babel/cli @babel/node -D
npm i @babel/preset-env -D

.gitignore //node_modules Î¨¥Ïãú


-- nodemon.json
{
  "ignore": ["src/public/*"], // frontEnd ÌååÏùº Ï†ÄÏû• Ïãú ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Î∞©ÏßÄ
  "exec": "babel-node src/server.js" // server.jsÏóê ÎåÄÌï¥ babel-node Î™ÖÎ†πÎ¨∏ Ïã§Ìñâ
}


-- babel.config.json
{
  "presets": ["@babel/preset-env"]
}


-- package.json
  "scripts": {
    "dev": "nodemon"
  },


-- install express & pug
npm i express
npm i pug


-- create public folder // frontend folder
public/js/app.js
views/home.pug // html5 ÏûÖÎ†•


-- server.js
import express from "express"; // server.js ÎÇ¥Ïóê express import

const app = express();

app.set("view engine", "pug");
app.set("views", __dirname + "/views"); // expressÏóê template ÏúÑÏπò Î∂ÄÏó¨
app.use("/public", express.static(__dirname + "/public")); // public folder ÎÇ¥ ÌååÏùºÏóê access *static ÏûëÏóÖ
app.get("/", (req, res) => res.render("home")); // home.pugÎ•º renderÌïòÎäî route handler

const handleListen = () => console.log(`Listening on http://localhost:3000`);

app.listen(3000, handleListen);


-- home.pug
doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Noom
        link(rel="stylesheet", href="https://unpkg.com/mvp.css") // css style site

    body 
        header
            h1 It works!
        main 
            h2 Welcome to Noom
        
        script(src="/public/js/app.js") 


*npm run dev // ÏÑúÎ≤Ñ Ïã§Ìñâ

<#1 CHAT WITH WEBSOCKETS>

#1.2 WebSockets in NodeJS

 npm i ws // install WebSocket

-- updated_server.js
import http from "http"; // import http 
import WebSocket from "ws"; // import ws
import express from "express";

const app = express();

app.set("view engine", "pug");
app.set("views", __dirname + "/views");
app.use("/public", express.static(__dirname + "/public"));
app.get("/", (_, res) => res.render("home"));
app.get("/*", (_, res) => res.redirect("/"));

const handleListen = () => console.log(`Listening on http://localhost:3000`);

const server = http.createServer(app); // express.js ÌôúÏö© server ÏÉùÏÑ±
const wss = new WebSocket.Server({ server }); // ÏÉùÏÑ±Îêú server Í∏∞Î∞ò ws ÏÉùÏÑ±

// http & ws ÎèôÏãú ÏÇ¨Ïö© Í∞ÄÎä•(ÌïÑÏöîÏóê Îî∞Îùº ÌïòÎÇòÎßå ÏÉùÏÑ±Ìï¥ÎèÑ Îê®)


#1.4 WebSocket Messages

-- server.js

wss.on("connection", (socket) => {
  console.log("Connected to Browser ‚úÖ"); // broswer Ïó∞Í≤∞ backend ÌëúÏãú

  socket.on("close", () => {
    console.log("Disconnected from Browser ‚ùå");
  }); // frontend Ï∞Ω Îã´ÌòîÏùÑ Ïãú backendÏóê ÌëúÏãú

  socket.on("message", (message) => {
    console.log(message.toString("utf-8"));
  }); // frontendÏóêÏÑú Ïò® message ÌëúÏãú

  socket.send("hello!"); // frontendÏóê message Ï†ÑÏÜ°
});
// backendÏùò socketÏùÄ Ïó∞Í≤∞Îêú browser

server.listen(3000, handleListen);


-- app.js

const socket = new WebSocket(`ws://${window.location.host}`);
// frontendÏùò socketÏùÄ serverÎ°úÏùò Ïó∞Í≤∞

socket.addEventListener("open", () => {
  console.log("Connected to Server ‚úÖ");
}); // serverÏóê Ï†ïÏÉÅ Ïó∞Í≤∞ Ïãú ÌëúÏãú

socket.addEventListener("message", (message) => {
  console.log("New Message: ", message.data, " from the Server");
}); // backendÏóêÏÑú Ïò® message ÌëúÏãú

socket.addEventListener("close", () => {
  console.log("Disconnected from Server ‚ùå");
}); // backendÏóêÏÑú browser Ïó∞Í≤∞ ÎÅäÍ≤ºÏùÑ Îïå ÌëúÏãú

setTimeout(() => {
  socket.send("hello from the browser üñê");
}, 1000); // backendÎ°ú message Ï†ÑÏÜ°











































































